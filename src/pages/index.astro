---
const gridSize = 9;

function buildGrid(gridSize: number) {
  const grid = [];
  let index = 1;
  for (let row = 1; row <= gridSize; row++) {
	for (let col = 1; col <= gridSize; col++) {
	  grid.push(`<div onClick='selectCell(event)' class='cell' data-index=${index} data-row=${row} data-col=${col}></div>`);
	  index++;
	}
  }
  return grid;
}

function buildSelector() {
  const selector = [];
	for (let index = 1; index <= gridSize; index++) {
	  selector.push(`<div onClick='selectNumber(event)' class='selector' data-index=${index}>${index}</div>`);
	}
  return selector;
}
---
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width" />
		<title>Sudoku</title>
		<style global>
		@import "../styles/styles.css";
		</style>
	</head>
	<body>
		<h1>Sudoku!</h1>
		<section class="container">
			<main>
				<div class="board" data-grid={gridSize}>
					{buildGrid(gridSize).map((cell) => <Fragment set:html={cell} />)}
				</div>
			</main>
			<side>
				<div class="numbers">
					{buildSelector().map((cell) => <Fragment set:html={cell} />)}
				</div>
			</side>
		</section>

	</body>
</html>

<script>
/**
 * The `feed` is an array of arrays, where each array is a row in the board
 */
const feed = [
  [0, 0, 0, 4, 9, 1, 5, 0, 3],
  [8, 1, 9, 0, 2, 0, 0, 0, 0],
  [3, 0, 5, 0, 0, 8, 0, 9, 1],
  [9, 0, 4, 0, 0, 0, 1, 0, 6],
  [0, 0, 0, 6, 4, 9, 3, 0, 0],
  [0, 7, 2, 1, 0, 3, 8, 4, 0],
  [0, 0, 7, 0, 1, 0, 0, 3, 0],
  [0, 9, 8, 5, 0, 0, 0, 0, 0],
  [0, 5, 0, 9, 0, 0, 4, 6, 0]
];

let selectedNumber = null;

function verifyBoard(row, col, number) {
	let valid = true;

	/**
	 * Verify row
	 * Uses the board row number to map to the `feed` row array
	 * and checks if the number already exists
	 */
	if (feed[row].includes(number)) {
		valid = false;
	}

	/**
	 * Verify column
	 * Since we now the column we can look every row in a fixed position
	 * to check if the number exists.
	 */
	for (const row of feed) {
		if (row[col] === number) {
			valid = false;
		}
	}

	const rowOffset = row + 1;
	const colOffset = col + 1;

	const maxRow = Math.max(3, Math.min(9, Math.ceil(rowOffset/3) * 3));
	const minRow = Math.max(0, maxRow - 3);

	const maxCol = Math.max(3, Math.min(9, Math.ceil(colOffset/3) * 3));
	const minCol = Math.max(0, maxCol - 3);

	for (let rowIndex = minRow; rowIndex < maxRow; rowIndex++) {
		for (let colIndex = minCol; colIndex < maxCol; colIndex++) {
			const element = feed[rowIndex][colIndex];
			if (element === number) {
				valid = false;
			}
		}
	}

	return valid;
}

function generator(grideSide) {
	const board = [];
	for (let index = 0; index < grideSide * grideSide ; index++) {
		const element = array[index];
	}

}

function selectCell(event) {
	const cellElement = event.target;
	if (!cellElement.classList.contains('prefilled')) {
		const cellIndex = cellElement.dataset.index;
		const cellRow = parseInt(cellElement.dataset.row) - 1;
		const cellCol = parseInt(cellElement.dataset.col) - 1;
		const prevSelectedCell = document.querySelector('.cell.selected');
		if (prevSelectedCell) {
			prevSelectedCell.classList.remove('selected');
		}
		cellElement.classList.toggle('selected');
		if (selectedNumber && cellElement.innerHTML === '') {
			cellElement.innerText = selectedNumber;
			const isCellValid = verifyBoard(cellRow, cellCol, selectedNumber);
			feed[cellRow][cellCol] = selectedNumber;

			if (!isCellValid) {
				cellElement.classList.add('invalid');
			}
		}
	}


}

function selectNumber(event) {
	const numberElment = event.target;
	selectedNumber = parseInt(numberElment.dataset.index);
	const prevSelectedNumber = document.querySelector('.selector.selected');
	if (prevSelectedNumber) {
		prevSelectedNumber.classList.remove('selected');
	}
	numberElment.classList.toggle('selected')
}

function fillBoard() {
	const board = document.querySelector('.board');
	const cells = board.querySelectorAll('.cell');
	const flatfeed = feed.flat();
	for (const cell of cells) {
		const cellIndex = parseInt(cell.dataset.index) - 1;
		const cellValue = flatfeed[cellIndex];
		if (cellValue) {
			cell.innerText = cellValue;
			cell.classList.add('prefilled');

		}
	}
}

fillBoard();

</script>